*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 06.12.2021 at 20:23:25
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZTSKY_V_SUPPLY..................................*
FORM GET_DATA_ZTSKY_V_SUPPLY.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTSKY_D_SUPPLY WHERE
(VIM_WHERETAB) .
    CLEAR ZTSKY_V_SUPPLY .
ZTSKY_V_SUPPLY-MANDT =
ZTSKY_D_SUPPLY-MANDT .
ZTSKY_V_SUPPLY-ID_SUPPLY =
ZTSKY_D_SUPPLY-ID_SUPPLY .
ZTSKY_V_SUPPLY-ID_PRODUCT =
ZTSKY_D_SUPPLY-ID_PRODUCT .
ZTSKY_V_SUPPLY-SUPPLY_AMOUNT =
ZTSKY_D_SUPPLY-SUPPLY_AMOUNT .
ZTSKY_V_SUPPLY-SUPPLY_DELIVER =
ZTSKY_D_SUPPLY-SUPPLY_DELIVER .
ZTSKY_V_SUPPLY-SUPPLY_DATE =
ZTSKY_D_SUPPLY-SUPPLY_DATE .
    SELECT SINGLE * FROM ZTSKY_D_PRODUCT WHERE
ID_PRODUCT = ZTSKY_D_SUPPLY-ID_PRODUCT .
    IF SY-SUBRC EQ 0.
ZTSKY_V_SUPPLY-ID_MEASURMENT =
ZTSKY_D_PRODUCT-ID_MEASURMENT .
      SELECT SINGLE * FROM ZTSKY_D_PROD_T WHERE
ID_PRODUCT = ZTSKY_D_PRODUCT-ID_PRODUCT AND
LANGU = SY-LANGU .
      IF SY-SUBRC EQ 0.
ZTSKY_V_SUPPLY-PRODUCT_NAME =
ZTSKY_D_PROD_T-PRODUCT_NAME .
      ENDIF.
    ENDIF.
<VIM_TOTAL_STRUC> = ZTSKY_V_SUPPLY.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZTSKY_V_SUPPLY .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZTSKY_V_SUPPLY.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZTSKY_V_SUPPLY-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTSKY_D_SUPPLY WHERE
  ID_SUPPLY = ZTSKY_V_SUPPLY-ID_SUPPLY AND
  ID_PRODUCT = ZTSKY_V_SUPPLY-ID_PRODUCT .
    IF SY-SUBRC = 0.
    DELETE ZTSKY_D_SUPPLY .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTSKY_D_SUPPLY WHERE
  ID_SUPPLY = ZTSKY_V_SUPPLY-ID_SUPPLY AND
  ID_PRODUCT = ZTSKY_V_SUPPLY-ID_PRODUCT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTSKY_D_SUPPLY.
    ENDIF.
ZTSKY_D_SUPPLY-MANDT =
ZTSKY_V_SUPPLY-MANDT .
ZTSKY_D_SUPPLY-ID_SUPPLY =
ZTSKY_V_SUPPLY-ID_SUPPLY .
ZTSKY_D_SUPPLY-ID_PRODUCT =
ZTSKY_V_SUPPLY-ID_PRODUCT .
ZTSKY_D_SUPPLY-SUPPLY_AMOUNT =
ZTSKY_V_SUPPLY-SUPPLY_AMOUNT .
ZTSKY_D_SUPPLY-SUPPLY_DELIVER =
ZTSKY_V_SUPPLY-SUPPLY_DELIVER .
ZTSKY_D_SUPPLY-SUPPLY_DATE =
ZTSKY_V_SUPPLY-SUPPLY_DATE .
    IF SY-SUBRC = 0.
    UPDATE ZTSKY_D_SUPPLY .
    ELSE.
    INSERT ZTSKY_D_SUPPLY .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZTSKY_V_SUPPLY-UPD_FLAG,
STATUS_ZTSKY_V_SUPPLY-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZTSKY_V_SUPPLY.
  SELECT SINGLE * FROM ZTSKY_D_SUPPLY WHERE
ID_SUPPLY = ZTSKY_V_SUPPLY-ID_SUPPLY AND
ID_PRODUCT = ZTSKY_V_SUPPLY-ID_PRODUCT .
ZTSKY_V_SUPPLY-MANDT =
ZTSKY_D_SUPPLY-MANDT .
ZTSKY_V_SUPPLY-ID_SUPPLY =
ZTSKY_D_SUPPLY-ID_SUPPLY .
ZTSKY_V_SUPPLY-ID_PRODUCT =
ZTSKY_D_SUPPLY-ID_PRODUCT .
ZTSKY_V_SUPPLY-SUPPLY_AMOUNT =
ZTSKY_D_SUPPLY-SUPPLY_AMOUNT .
ZTSKY_V_SUPPLY-SUPPLY_DELIVER =
ZTSKY_D_SUPPLY-SUPPLY_DELIVER .
ZTSKY_V_SUPPLY-SUPPLY_DATE =
ZTSKY_D_SUPPLY-SUPPLY_DATE .
    SELECT SINGLE * FROM ZTSKY_D_PRODUCT WHERE
ID_PRODUCT = ZTSKY_D_SUPPLY-ID_PRODUCT .
    IF SY-SUBRC EQ 0.
ZTSKY_V_SUPPLY-ID_MEASURMENT =
ZTSKY_D_PRODUCT-ID_MEASURMENT .
      SELECT SINGLE * FROM ZTSKY_D_PROD_T WHERE
ID_PRODUCT = ZTSKY_D_PRODUCT-ID_PRODUCT AND
LANGU = SY-LANGU .
      IF SY-SUBRC EQ 0.
ZTSKY_V_SUPPLY-PRODUCT_NAME =
ZTSKY_D_PROD_T-PRODUCT_NAME .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZTSKY_V_SUPPLY-PRODUCT_NAME .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZTSKY_V_SUPPLY-ID_MEASURMENT .
      CLEAR ZTSKY_V_SUPPLY-PRODUCT_NAME .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZTSKY_V_SUPPLY USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZTSKY_V_SUPPLY-ID_SUPPLY TO
ZTSKY_D_SUPPLY-ID_SUPPLY .
MOVE ZTSKY_V_SUPPLY-ID_PRODUCT TO
ZTSKY_D_SUPPLY-ID_PRODUCT .
MOVE ZTSKY_V_SUPPLY-MANDT TO
ZTSKY_D_SUPPLY-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTSKY_D_SUPPLY'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTSKY_D_SUPPLY TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTSKY_D_SUPPLY'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZTSKY_V_SUPPLY USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTSKY_D_SUPPLY-MANDT =
ZTSKY_V_SUPPLY-MANDT .
ZTSKY_D_SUPPLY-ID_SUPPLY =
ZTSKY_V_SUPPLY-ID_SUPPLY .
ZTSKY_D_SUPPLY-ID_PRODUCT =
ZTSKY_V_SUPPLY-ID_PRODUCT .
ZTSKY_D_SUPPLY-SUPPLY_AMOUNT =
ZTSKY_V_SUPPLY-SUPPLY_AMOUNT .
ZTSKY_D_SUPPLY-SUPPLY_DELIVER =
ZTSKY_V_SUPPLY-SUPPLY_DELIVER .
ZTSKY_D_SUPPLY-SUPPLY_DATE =
ZTSKY_V_SUPPLY-SUPPLY_DATE .
    SELECT SINGLE * FROM ZTSKY_D_PRODUCT WHERE
ID_PRODUCT = ZTSKY_D_SUPPLY-ID_PRODUCT .
    IF SY-SUBRC EQ 0.
ZTSKY_V_SUPPLY-ID_MEASURMENT =
ZTSKY_D_PRODUCT-ID_MEASURMENT .
      SELECT SINGLE * FROM ZTSKY_D_PROD_T WHERE
ID_PRODUCT = ZTSKY_D_PRODUCT-ID_PRODUCT AND
LANGU = SY-LANGU .
      IF SY-SUBRC EQ 0.
ZTSKY_V_SUPPLY-PRODUCT_NAME =
ZTSKY_D_PROD_T-PRODUCT_NAME .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZTSKY_V_SUPPLY-PRODUCT_NAME .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZTSKY_V_SUPPLY-ID_MEASURMENT .
      CLEAR ZTSKY_V_SUPPLY-PRODUCT_NAME .
    ENDIF.
ENDFORM.
